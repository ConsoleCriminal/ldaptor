#!/usr/bin/python

import sys
from ldaptor.protocols.ldap import ldapclient, ldapfilter, ldif
from ldaptor.protocols import pureber, pureldap
from twisted.internet.defer import Deferred, DeferredList
from twisted.internet import protocol, reactor

class SearchNamingContexts(ldapclient.LDAPSearch):
    def __init__(self, deferred, client, host):
        ldapclient.LDAPSearch.__init__(
            self, deferred, client,
            baseObject='',
            scope=pureldap.LDAP_SCOPE_baseObject,
            filter=pureldap.LDAPFilter_present('objectClass'),
            attributes=['namingContexts'])
        self.host=host

    def handle_entry(self, objectName, attributes):
        for a,vs in attributes:
            a=str(a)
            if a=='namingContexts':
                for v in vs:
                    v=str(v)
                    print '%s\t%s' % (self.host, v)

class Search(ldapclient.LDAPClient):
    def connectionMade(self):
        d=self.bind()
        d.addCallback(self._handle_bind_success)

    def _handle_bind_success(self, x):
        matchedDN, serverSaslCreds = x
        SearchNamingContexts(self.factory.deferred,
                             self,
                             self.factory.server)

class SearchFactory(protocol.ClientFactory):
    protocol = Search

    def __init__(self, server, deferred):
        self.server=server
        self.deferred=deferred

    def connectionFailed(self, connector, reason):
        self.deferred.errback(None)

exitStatus = 0

def errback(data):
    print "ERROR:", data
    global exitStatus
    exitStatus=1

def main(servers):
    l = []
    for server in servers:
        d=Deferred()
        l.append(d)
        s=SearchFactory(server, d)
        reactor.connectTCP(server, 389, s)
    dl = DeferredList(l)
    dl.addErrback(errback)
    dl.addBoth(lambda x: reactor.stop())
    reactor.run()
    sys.exit(exitStatus)

if __name__ == "__main__":
    if not sys.argv[1:]:
        print '%s: usage:' % sys.argv[0]
        print '  %s HOST..' % sys.argv[0]
    else:
        main(sys.argv[1:])
