#!/usr/bin/python

import sys, getpass
from ldaptor.protocols.ldap import ldapclient, ldaperrors
from ldaptor.protocols import pureber, pureldap
from ldaptor import usage, generate_password
from twisted.internet import defer, reactor, protocol

class PasswdClient(ldapclient.LDAPClient):
    def connectionMade(self):
        if self.factory.binddn:
            pwd = self.factory.bindPassword
            if pwd is None:
                pwd = getpass.getpass('Password for %s: ' \
                                      % self.factory.binddn)
            self.bind(self.factory.binddn, pwd)
        else:
            self.bind()

    def _report_ldap_error(self, x):
        resultCode, errorMessage = x
        sys.stderr.write("fail: %s: %s\n"%(ldaperrors.errors.reverse.get(
            resultCode, str(resultCode)),
                                           errorMessage or "Unknown error"))
        global exitStatus
        exitStatus=1


    def getPassword(self, dn):
        if not self.factory.generatePasswords:
            pwd=getpass.getpass('NEW Password for %s: ' % dn)
            return defer.succeed(pwd)
        else:
            return generate_password.generate()

    def handle_bind_success(self, matchedDN, serverSaslCreds):
        l=[]
        for dn in self.factory.dnlist:
            d=self.getPassword(dn)
            d.addCallbacks(callback=self._got_password,
                           callbackArgs=(dn,),
                           errback=self._report_pwgen_error)
            l.append(d)
        dl=defer.DeferredList(l)
        dl.addBoth(lambda x, f=self.transport.loseConnection: f())
        dl.addBoth(lambda x, f=reactor.stop: f())

    def _report_new_password(self, dummy, dn, password):
        if self.factory.generatePasswords:
            print dn, password

    def _got_password(self, password, dn):
        assert len(password)==1
        password=password[0]
        d=defer.Deferred()
        ldapclient.LDAPModifyPassword(d, self,
                                      userIdentity=dn,
                                      newPasswd=password)
        d.addCallbacks(callback=self._report_new_password,
                       callbackArgs=(dn, password),
                       errback=self._report_ldap_error)
        return d

    def _report_pwgen_error(self, fail):
        fail.trap(PwgenException)
        sys.stderr.write('pwgen: %s\n' % fail.getErrorMessage())
        return fail

    def handle_bind_fail(self, resultCode, errorMessage):
        self._report_ldap_error((resultCode, errorMessage))
        self.transport.loseConnection()
        reactor.stop()

class PasswdClientFactory(protocol.ClientFactory):
    protocol = PasswdClient
    def __init__(self, binddn, bindPassword=None,
                 dnlist=(), generatePasswords=0):
        self.binddn = binddn
        self.bindPassword = bindPassword
        self.dnlist=dnlist
        self.generatePasswords=generatePasswords

exitStatus=0

class MyOptions(usage.Options,
                usage.Options_hostport,
                usage.Options_bind_mandatory):
    """LDAPtor command line password change utility"""
    optFlags = [('generate', None, 'Generate random passwords')]

    def parseArgs(self, dn, *dnlist):
        dnlist = (dn,)+dnlist
        self.opts['dnlist'] = dnlist

if __name__ == "__main__":
    import sys, os
    from twisted.python import log
    log.logfile=sys.stderr
    try:
        config = MyOptions()
        config.parseOptions()
    except usage.UsageError, ue:
        sys.stderr.write('%s: %s\n' % (sys.argv[0], ue))
        sys.exit(1)

    bindPassword=None
    if config.opts['bind-auth-fd']:
        f=os.fdopen(config.opts['bind-auth-fd'])
        bindPassword=f.readline()
        assert bindPassword[-1]=='\n'
        bindPassword=bindPassword[:-1]
        f.close()

    s=PasswdClientFactory(dnlist=config.opts['dnlist'],
                          binddn=config.opts['binddn'],
                          bindPassword=bindPassword,
                          generatePasswords=config.opts['generate'],
                          )
    reactor.connectTCP(config.opts['ldap-host'], config.opts['ldap-port'], s)
    reactor.run()
    sys.exit(exitStatus)
