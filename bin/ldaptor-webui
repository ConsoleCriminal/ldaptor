#!/usr/bin/python

from ldaptor.apps import webui
from ldaptor.apps.webui import gadget

from twisted.internet import main, app, protocol
from twisted.cred.service import Service
from twisted.cred.identity import Identity
from twisted.cred.perspective import Perspective
from twisted.cred.authorizer import Authorizer
from twisted.internet.defer import Deferred
from twisted.internet import defer, reactor
from twisted.python.failure import Failure
from ldaptor.protocols.ldap import ldapclient
from ldaptor.protocols import pureldap
from twisted.web import server, guard
from ldaptor import usage

class LDAPAuth(ldapclient.LDAPClient):
    def connectionMade(self):
        ldapclient.LDAPClient.connectionMade(self)
        self.bind(self.factory.dn, self.factory.auth)
        del self.factory.auth

    def handle_bind_success(self, matchedDN, serverSaslCreds):
        ldapclient.LDAPClient.handle_bind_success(self, matchedDN, serverSaslCreds)
        self.factory.defe.callback("ok")

    def handle_bind_fail(self, resultCode, errorMessage):
        ldapclient.LDAPClient.handle_bind_fail(self, resultCode, errorMessage)
        self.factory.defe.errback(errorMessage)

class LDAPAuthFactory(protocol.ClientFactory):
    protocol = LDAPAuth

    def __init__(self, defe, dn, auth, cb_connectionLost):
        self.defe = defe
        self.dn = dn
        self.auth = auth
        self.cb_connectionLost = cb_connectionLost
        self.proto=None

    def connectionFailed(self, connector, reason):
        self.proto=None
        self.defe.errback("connection failed")

    def connectionLost(self, connector):
        self.proto=None
        self.cb_connectionLost()

    def buildProtocol(self, addr):
        p=protocol.ClientFactory.buildProtocol(self, addr)
        self.proto=p
        return p

class LDAPIdentity(Identity):
    def __init__(self, name, application,
                 ldapClientFactoryFactory, ldaphost="localhost", ldapport=389):
        Identity.__init__(self, name, application)
        self.ldapClientFactoryFactory=ldapClientFactoryFactory
        self.ldapClientFactory=None
        self.ldaphost=ldaphost
        self.ldapport=ldapport
        self.notify_on_connectionLost = []

    def setPassword(self, plaintext):
        raise NotImplementedError

    def setAlreadyHashedPassword(self, cyphertext):
        raise NotImplementedError

    def challenge(self):
        raise NotImplementedError

    def verifyPassword(self, challenge, hashedPassword):
        raise NotImplementedError

    def getLDAPClient(self):
        if self.ldapClientFactory is None:
            return None
        return self.ldapClientFactory.proto

    def verifyPlainPassword(self, plaintext):
        assert not self.getLDAPClient()
        pwrq = Deferred()
        self.ldapClientFactory = self.ldapClientFactoryFactory(
            pwrq, self.name, plaintext, self.connectionLost)
        reactor.connectTCP(self.ldaphost, self.ldapport,
                          self.ldapClientFactory)
        return pwrq

    def connectionLost(self):
        self.ldapClientFactory=None
        for cb in self.notify_on_connectionLost:
            cb()
        self.notify_on_connectionLost = []

    def notifyOnConnectionLost(self, cb):
        self.notify_on_connectionLost.append(cb)

class LDAPPerspective(Perspective):
    def __init__(self, perspectiveName, identityName="Nobody"):
        Perspective.__init__(self, perspectiveName, identityName=identityName)
        self.sessions={}

    def attached(self, reference, identity):
        try:
            self.sessions[reference]+=1
        except KeyError:
            self.sessions[reference]=1
        return Perspective.attached(self, reference, identity)

    def detached(self, reference, identity):
        self.sessions[reference]-=1
        if self.sessions[reference]==0:
            del self.sessions[reference]
        return Perspective.detached(self, reference, identity)

    def connectionLost(self):
        for session in self.sessions.keys():
            session.expire()

class LDAPFetchIdentity(ldapclient.LDAPSearch):
    def __init__(self, deferred, client, application, dn,
                 ldaphost='localhost',
                 ldapport=389):
        ldapclient.LDAPSearch.__init__(self, deferred, client,
                                       baseObject=dn,
                                       scope=pureldap.LDAP_SCOPE_baseObject,
                                       typesOnly=1)
        self.application = application
        self.dn = dn
        self.found = None
        self.ldaphost = ldaphost
        self.ldapport = ldapport

        deferred.addCallbacks(callback=self.process,
                              errback=lambda x: x)

    def process(self, dummy):
        if self.found:
            ident = LDAPIdentity(self.dn, self.application, LDAPAuthFactory,
                                 self.ldaphost, self.ldapport)
            #TODO I don't want to enumerate them here!
            ident.addKeyByString("edit", self.found)
            return ident
        else:
            raise LDAPUnknownError(ldaperrors.other, "unauthorized")

    def handle_entry(self, objectName, attributes):
        if not self.found:
            self.found = str(objectName)
        else:
            raise "GOT DUPLICATES (TODO)"

class FetchIdentities(ldapclient.LDAPClient):
    def connectionLost(self):
        ldapclient.LDAPClient.connectionLost(self)
        if self.factory.unregister:
            self.factory.unregister(self)
        
    def connectionMade(self):
        self.bind()

    def handle_bind_success(self, matchedDN, serverSaslCreds):
        if self.factory.register:
            self.factory.register(self)

    def fetch(self, name, deferred):
        LDAPFetchIdentity(deferred=deferred,
                          client=self,
                          application=self.factory.application,
                          dn=name,
                          ldaphost=self.factory.ldaphost,
                          ldapport=self.factory.ldapport)

class FetchIdentitiesFactory(protocol.ClientFactory):
    protocol = FetchIdentities
    def __init__(self,
                 register=None, unregister=None,
                 application=None,
                 ldaphost='localhost',
                 ldapport=389):
        self.register = register
        self.unregister = unregister
        assert application
        self.application = application
        self.ldaphost = ldaphost
        self.ldapport = ldapport

class LDAPAuthorizer(Authorizer):
    def __init__(self, ldaphost, ldapport):
        self.ldaphost = ldaphost
        self.ldapport = ldapport
        self.fetcher = None
        self.pendingIdentityRequests = {}

    def registerFetcher(self, fetcher):
        """Register the identity fetcher."""
        assert not self.fetcher
        self.fetcher = fetcher

    def unregisterFetcher(self, fetcher):
        """Unregister the identity fetcher."""
        assert self.fetcher==fetcher #TODO fails when LDAP server is stopped
        self.fetcher = None

    def setApplication(self, application):
        Authorizer.setApplication(self, application)
        factory = FetchIdentitiesFactory(
            register=self.registerFetcher,
            unregister=self.unregisterFetcher,
            application=application,
            ldaphost=self.ldaphost,
            ldapport=self.ldapport,
            )
        application.connectTCP(self.ldaphost, self.ldapport, factory)

    def getIdentityRequest(self, name):
        """Get a Deferred callback registration object.

        I return a deferred (twisted.internet.defer.Deferred) which will
        be called back to when an identity is discovered to be available
        (or errback for unavailable).  It will be returned unarmed, so
        you must arm it yourself.
        """

        req = Deferred()
        if not self.fetcher:
            req.errback("unable to serve")
        else:
            self.fetcher.fetch(name, req)
        return req

class LDAPService(Service):
    def _ident_ok(self, ident, name, req):
        req.callback(self.createPerspective(name))

    def _ident_fail(self, msg, name, req):
        req.errback("No such perspective %s: %s"%(name, msg))

    def loadPerspective(self, name):
        identreq = self.application.authorizer.getIdentityRequest(name)
        req = Deferred()
        identreq.addCallback(self._ident_ok, name, req)
        identreq.addErrback(self._ident_fail, name, req)
        identreq.arm()
        return req

    def getPerspectiveRequest(self, name):
        try:
            p = self.getPerspectiveNamed(name)
        except KeyError:
            return self.loadPerspective(name)
        else:
            return defer.succeed(p)


class MyOptions(usage.Options, usage.Options_hostport, usage.Options_base):
    """LDAPtor Web User Interface"""

    optParameters = (
        ('http-port', None, '8080',
         "listen on this port"),
        )

    def postOptions_httpport(self):
        try:
            val = int(self.opts['http-port'])
        except ValueError:
            raise usage.UsageError, "%s value must be numeric" % 'http-port'
        self.opts['http-port'] = val
        
if __name__ == '__main__':
    import sys
    try:
        config = MyOptions()
        config.parseOptions()
    except usage.UsageError, ue:
        sys.stderr.write('%s: %s\n' % (sys.argv[0], ue))
        sys.exit(1)
    application = app.Application(
        'ldaptor-webui',
        authorizer=LDAPAuthorizer(ldaphost=config.opts['ldap-host'],
                                  ldapport=config.opts['ldap-port']))
    svc = LDAPService("edit", application)
    svc.perspectiveClass = LDAPPerspective
    gdgt = gadget.LdaptorWebUIGadget(svc,
                                     baseObject=config.opts['base'],
                                     ldaphost=config.opts['ldap-host'],
                                     ldapport=config.opts['ldap-port'],
                                     )
    
    sit = server.Site(gdgt)
    sit.application = application
    application.listenTCP(config.opts['http-port'], sit)
    application.run(save=0)
