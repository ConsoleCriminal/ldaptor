#!/usr/bin/python

from ldaptor.apps import webui
from ldaptor.apps.webui import gadget

from twisted.internet import main, app, protocol
from twisted.cred.service import Service
from twisted.cred.identity import Identity
from twisted.cred.perspective import Perspective
from twisted.cred.authorizer import Authorizer
import twisted.internet.defer
from twisted.internet import defer, reactor
from twisted.python.failure import Failure
from ldaptor.protocols.ldap import ldapclient, ldapfilter
from ldaptor.protocols import pureldap
from twisted.web import server, guard
from ldaptor import usage

class LDAPAuth(ldapclient.LDAPClient):
    def connectionMade(self):
        ldapclient.LDAPClient.connectionMade(self)
        d=self.bind(self.factory.dn, self.factory.auth)
        del self.factory.auth
        d.addErrback(self._unbind)
        d.chainDeferred(self.factory.defe)

    def _unbind(self, fail):
        self.unbind()
        raise fail
                     

class LDAPAuthFactory(protocol.ClientFactory):
    protocol = LDAPAuth

    def __init__(self, defe, dn, auth, cb_connectionLost):
        self.defe = defe
        self.dn = dn
        self.auth = auth
        self.cb_connectionLost = cb_connectionLost
        self.proto=None

    def clientConnectionFailed(self, connector, reason):
        self.proto=None
        self.defe.errback("connection failed")

    def clientConnectionLost(self, connector, reason):
        self.proto=None
        self.cb_connectionLost(reason)

    def buildProtocol(self, addr):
        p=protocol.ClientFactory.buildProtocol(self, addr)
        self.proto=p
        return p

class LDAPIdentity(Identity):
    def __init__(self, name, dn, authorizer,
                 ldapClientFactoryFactory, ldaphost, ldapport=389):
        Identity.__init__(self, name, authorizer)
        self.dn=dn
        self.ldapClientFactoryFactory=ldapClientFactoryFactory
        self.ldapClientFactory=None
        self.ldaphost=ldaphost
        self.ldapport=ldapport
        self.notify_on_connectionLost = []

    def setPassword(self, plaintext):
        raise NotImplementedError

    def setAlreadyHashedPassword(self, cyphertext):
        raise NotImplementedError

    def challenge(self):
        raise NotImplementedError

    def verifyPassword(self, challenge, hashedPassword):
        raise NotImplementedError

    def getLDAPClient(self):
        if self.ldapClientFactory is None:
            return None
        return self.ldapClientFactory.proto

    def verifyPlainPassword(self, plaintext):
        assert not self.getLDAPClient()
        if not plaintext:
            return defer.fail(Failure('You must enter a password.'))
            
        pwrq = defer.Deferred()
        self.ldapClientFactory = self.ldapClientFactoryFactory(
            pwrq, self.dn, plaintext, self.connectionLost)
        reactor.connectTCP(self.ldaphost, self.ldapport,
                          self.ldapClientFactory)
        return pwrq

    def connectionLost(self, reason):
        self.ldapClientFactory=None
        for cb in self.notify_on_connectionLost:
            cb()
        self.notify_on_connectionLost = []

    def notifyOnConnectionLost(self, cb):
        self.notify_on_connectionLost.append(cb)

    def cancelNotifyOnConnectionLost(self, cb):
        self.notify_on_connectionLost.remove(cb)

class LDAPPerspective(Perspective):
    def __init__(self, perspectiveName, identityName="Nobody"):
        Perspective.__init__(self, perspectiveName, identityName=identityName)
        self.sessions={}

    def attached(self, reference, identity):
        try:
            self.sessions[reference]+=1
        except KeyError:
            self.sessions[reference]=1
        identity.notifyOnConnectionLost(self.connectionLost)
        return Perspective.attached(self, reference, identity)

    def detached(self, reference, identity):
        identity.cancelNotifyOnConnectionLost(self.connectionLost)
        self.sessions[reference]-=1
        if self.sessions[reference]==0:
            del self.sessions[reference]
        return Perspective.detached(self, reference, identity)

    def connectionLost(self):
        for session in self.sessions.keys():
            session.expire()

class LDAPFetchIdentity(ldapclient.LDAPSearch):
    def __init__(self, deferred, client, dn):
        ldapclient.LDAPSearch.__init__(self, deferred, client,
                                       baseObject=dn,
                                       scope=pureldap.LDAP_SCOPE_baseObject,
                                       typesOnly=1)
        self.dn = dn
        self.found = None

        deferred.addCallbacks(callback=self.process,
                              errback=lambda x: x)

    def process(self, dummy):
        if self.found:
            return self.found
        else:
            raise LDAPUnknownError(ldaperrors.other, "unauthorized")

    def handle_entry(self, objectName, attributes):
        if not self.found:
            self.found = str(objectName)
        else:
            raise "GOT DUPLICATES (TODO)"

class LDAPSearchIdentity(ldapclient.LDAPSearch):
    def __init__(self, deferred, client,
                 baseObject, filter):
        ldapclient.LDAPSearch.__init__(self, deferred, client,
                                       baseObject=baseObject,
                                       filter=filter,
                                       typesOnly=1,
                                       sizeLimit=1)
        self.found = None

        deferred.addCallbacks(callback=self.process,
                              errback=lambda x: x)

    def process(self, dummy):
        if self.found:
            return self.found
        else:
            raise LDAPUnknownError(ldaperrors.other, "unauthorized")

    def handle_entry(self, objectName, attributes):
        if not self.found:
            self.found = str(objectName)
        else:
            raise "GOT DUPLICATES (TODO)"

class FetchIdentities(ldapclient.LDAPClient):
    def connectionLost(self, reason):
        ldapclient.LDAPClient.connectionLost(self, reason)
        
    def connectionMade(self):
        d=self.bind()
        d.addCallback(self._handle_bind_success)

    def _handle_bind_success(self, x):
        matchedDN, serverSaslCreds = x

    def fetch(self, name):
        deferred=defer.Deferred()
        LDAPFetchIdentity(deferred=deferred,
                          client=self,
                          dn=name)
        deferred.addCallbacks(callback=self._gotIdentityDN,
                              callbackArgs=(name,),
                              errback=self.search,
                              errbackArgs=(name,))
        return deferred

    def search(self, fail, name):
        filter=None
        try:
            filter=ldapfilter.parseFilter(name)
        except ldapfilter.InvalidLDAPFilter:
            try:
                filter=ldapfilter.parseFilter('('+name+')')
            except ldapfilter.InvalidLDAPFilter:
                if self.factory.ldapFilterTemplate is not None:
                    try:
                        filter=ldapfilter.parseFilter(
                            self.factory.ldapFilterTemplate
                            % {'name':name})
                    except ldapfilter.InvalidLDAPFilter:
                        pass

        base=self.factory.ldapbase
        if self.factory.ldapFilterBase is not None:
            base=self.factory.ldapFilterBase

        deferred=defer.Deferred()
        if filter is None:
            deferred.errback(Failure('No such Identity'))
        else:
            LDAPSearchIdentity(deferred=deferred,
                               client=self,
                               baseObject=base,
                               filter=filter)
            deferred.addCallbacks(callback=self._gotIdentityDN,
                                  callbackArgs=(name,),
                                  errback=self.search)
        return deferred

    def _gotIdentityDN(self, dn, name):
        ident = LDAPIdentity(name, dn, self.factory.authorizer,
                             LDAPAuthFactory,
                             self.factory.ldaphost, self.factory.ldapport)
        #TODO I don't want to enumerate them here!
        ident.addKeyByString("edit", name)
        return ident

class FetchIdentitiesFactory(protocol.ClientFactory):
    protocol = FetchIdentities
    def __init__(self,
                 ldaphost=None,
                 ldapport=389,
                 ldapbase='',
                 ldapFilterTemplate=None,
                 ldapFilterBase=None,
                 authorizer=None):
        assert authorizer
        self.authorizer = authorizer
        self.ldaphost = ldaphost
        self.ldapport = ldapport
        self.ldapbase = ldapbase
        self.ldapFilterTemplate = ldapFilterTemplate
        self.ldapFilterBase = ldapFilterBase
        self.requests = []
        self.proto = None

    def buildProtocol(self, addr):
        assert not self.proto
        self.proto=protocol.ClientFactory.buildProtocol(self, addr)
        self._wakeup_protocol()
        return self.proto

    def _wakeup_protocol(self):
        if self.proto:
            while self.requests:
                name, deferred = self.requests.pop(0)
                d = self.proto.fetch(name)
                d.chainDeferred(deferred)

    def fetch(self, name):
        deferred=defer.Deferred()
        self.requests.append((name, deferred))
        self._wakeup_protocol()
        return deferred

    def clientConnectionFailed(self, connector, reason):
        self.proto = None
        connector.connect()

    def clientConnectionLost(self, connector, reason):
        self.proto = None
        connector.connect()

class LDAPAuthorizer(Authorizer):
    def __init__(self, ldaphost, ldapport, ldapbase,
                 ldapFilterTemplate=None,
                 ldapFilterBase=None,
                 ):
        self.ldaphost = ldaphost
        self.ldapport = ldapport
        self.ldapbase = ldapbase
        self.ldapFilterTemplate = ldapFilterTemplate
        self.ldapFilterBase = ldapFilterBase
        self.pendingIdentityRequests = {}
        self.fetcher = FetchIdentitiesFactory(
            ldaphost=self.ldaphost,
            ldapport=self.ldapport,
            ldapbase=self.ldapbase,
            ldapFilterTemplate=self.ldapFilterTemplate,
            ldapFilterBase=self.ldapFilterBase,
            authorizer=self,
            )
        reactor.connectTCP(self.ldaphost, self.ldapport, self.fetcher)

    def setApplication(self, application):
        Authorizer.setApplication(self, application)

    def getIdentityRequest(self, name):
        """Get a Deferred callback registration object.

        I return a deferred (twisted.internet.defer.Deferred) which will
        be called back to when an identity is discovered to be available
        (or errback for unavailable).  It will be returned unarmed, so
        you must arm it yourself.
        """

        req = self.fetcher.fetch(name)
        return req

class LDAPService(Service):
    def _ident_ok(self, ident, name, req):
        req.callback(self.createPerspective(name))

    def _ident_fail(self, msg, name, req):
        req.errback("No such perspective %s: %s"%(name, msg))

    def loadPerspective(self, name):
        identreq = self.authorizer.getIdentityRequest(name)
        req = defer.Deferred()
        identreq.addCallback(self._ident_ok, name, req)
        identreq.addErrback(self._ident_fail, name, req)
        identreq.arm()
        return req

    def getPerspectiveRequest(self, name):
        try:
            p = self.getPerspectiveNamed(name)
        except KeyError:
            return self.loadPerspective(name)
        else:
            return defer.succeed(p)


class MyOptions(usage.Options, usage.Options_hostport, usage.Options_base):
    """LDAPtor Web User Interface"""

    def __init__(self, *args, **kwargs):
        usage.Options.__init__(self, *args, **kwargs)
        self.opts['search-field']=None

    optParameters = (
        ('http-port', None, '38980', # think "ldap and http"
         "listen on this port"),
        ('identity-search', None,
         '(|(cn=%(name)s)(uid=%(name)s))',
         "unknown identities are searched with this filter"),
        ('identity-base', None,
         None,
         "unknown identities are searched with this base (defaults to the --base value)"),
        )

    def opt_search_field(self, s):
        """
        Add extra search fields to search page. Value is of type
        fieldname=ldapfilter, where ldapfilter is expanded according
        to Python %(var)s convention, e.g. name=(cn=%(input)s).
        """

        try:
            field, filter = s.split('=', 1)
        except ValueError:
            raise usage.UsageError, 'search-field value must be of form field=filter'

        if self.opts['search-field'] is None:
            self.opts['search-field']=[]
        self.opts['search-field'].append((field, filter))

    def postOptions_search_field(self):
        if self.opts['search-field'] is None:
            self.opts['search-field']=()

    def postOptions_httpport(self):
        try:
            val = int(self.opts['http-port'])
        except ValueError:
            raise usage.UsageError, "%s value must be numeric" % 'http-port'
        self.opts['http-port'] = val
        
if __name__ == '__main__':
    import sys
    try:
        config = MyOptions()
        config.parseOptions()
    except usage.UsageError, ue:
        sys.stderr.write('%s: %s\n' % (sys.argv[0], ue))
        sys.exit(1)
    auth = LDAPAuthorizer(ldaphost=config.opts['ldap-host'],
                          ldapport=config.opts['ldap-port'],
                          ldapbase=config.opts['base'],
                          ldapFilterTemplate=config.opts['identity-search'],
                          ldapFilterBase=config.opts['identity-base'],
                          )
    application = app.Application('ldaptor-webui', authorizer=auth)
    svc = LDAPService("edit", serviceParent=application, authorizer=auth)
    svc.perspectiveClass = LDAPPerspective
    gdgt = gadget.LdaptorWebUIGadget(svc,
                                     baseObject=config.opts['base'],
                                     ldaphost=config.opts['ldap-host'],
                                     ldapport=config.opts['ldap-port'],
                                     searchFields=config.opts['search-field'],
                                     )
    
    sit = server.Site(gdgt)
    sit.application = application
    application.listenTCP(config.opts['http-port'], sit)
    application.run(save=0)
