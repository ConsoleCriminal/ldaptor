#!/usr/bin/python

import sys
from ldaptor.protocols.ldap import ldapclient, ldapfilter, ldif
from ldaptor.protocols import pureber, pureldap
from ldaptor import usage
from twisted.internet import protocol, reactor, defer

class SearchWithFilter(ldapclient.LDAPSearch):
    def __init__(self, deferred, client, base, filt, attributes=()):
        ldapclient.LDAPSearch.__init__(self, deferred, client,
                                       baseObject=base,
                                       filter=filt,
                                       attributes=attributes)

    def handle_entry(self, objectName, attributes):
        sys.stdout.write(ldif.asLDIF(objectName,
                                     (map(lambda (a,l):
                                          (str(a),
                                           map(lambda i: str(i), l)),
                                          attributes))))

class Search(ldapclient.LDAPClient):
    def connectionMade(self):
        self.bind()

    def handle_bind_success(self, matchedDN, serverSaslCreds):
        SearchWithFilter(self.factory.deferred, self,
                         self.factory.base, self.factory.filt,
                         self.factory.attributes)

class SearchFactory(protocol.ClientFactory):
    protocol = Search
    def __init__(self, deferred, base, filt, attributes):
        self.deferred=deferred
        self.base=base
        self.filt=filt
        self.attributes=attributes

    def connectionFailed(self, connector, reason):
        self.deferred.errback(reason)

exitStatus=0

def error(fail):
    print >>sys.stderr, 'fail:', fail.getErrorMessage()
    global exitStatus
    exitStatus=1

def main(host, port, base, filter_text, attributes):
    filt = ldapfilter.parseFilter(filter_text)
    d=defer.Deferred()
    s=SearchFactory(d, base, filt, attributes)
    d.addErrback(error)
    d.addBoth(lambda x: reactor.stop())
    reactor.connectTCP(host, port, s)
    reactor.run()
    sys.exit(exitStatus)

class MyOptions(usage.Options, usage.Options_hostport, usage.Options_base):
    """LDAPtor command line search utility"""

    def parseArgs(self, filter, *attributes):
        self.opts['filter'] = filter
        self.opts['attributes'] = attributes
      
if __name__ == "__main__":
    try:
        config = MyOptions()
        config.parseOptions()
    except usage.UsageError, ue:
        sys.stderr.write('%s: %s\n' % (sys.argv[0], ue))
        sys.exit(1)

    main(config.opts['ldap-host'],
         config.opts['ldap-port'],
         config.opts['base'],
         config.opts['filter'],
         config.opts['attributes'])
