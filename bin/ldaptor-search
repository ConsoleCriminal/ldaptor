#!/usr/bin/python

import sys
from ldaptor.protocols.ldap import ldapclient, ldapfilter, ldif
from ldaptor.protocols import pureber, pureldap
from ldaptor import usage

class SearchWithFilter(ldapclient.LDAPSearch):
    def __init__(self, client, base, filt, attributes=()):
        ldapclient.LDAPSearch.__init__(self, client,
                                       baseObject=base,
                                       filter=filt,
                                       attributes=attributes)

    def handle_success(self):
        self.client.search_done()

    def handle_entry(self, objectName, attributes):
        sys.stdout.write(ldif.asLDIF(objectName,
                                     (map(lambda (a,l):
                                          (str(a),
                                           map(lambda i: str(i), l)),
                                          attributes))))

    def handle_fail(self, resultCode, errorMessage):
        sys.stderr.write("fail: %d: %s\n"%(resultCode, errorMessage or "Unknown error"))
        self.client.search_fail(self)

class Search(ldapclient.LDAPClient):
    def __init__(self, base, filt, attributes, callback, errback):
        ldapclient.LDAPClient.__init__(self)
        self.base = base
        self.filter = filt
        self.attributes = attributes
        self.callback = callback
        self.errback = errback
    
    def connectionMade(self):
        self.bind()

    def handle_bind_success(self, matchedDN, serverSaslCreds):
        SearchWithFilter(self, self.base, self.filter, self.attributes)

    def search_done(self):
        self.callback()

    def search_fail(self, search):
        self.errback()

def callback():
    from twisted.internet import main
    main.shutDown()

def errback():
    from twisted.internet import main
    main.shutDown()
    sys.exit(1)

def main(host, port, base, filter_text, attributes):
    from twisted.internet import tcp, main
    filt = ldapfilter.parseFilter(filter_text)
    s=Search(base, filt, attributes, callback, errback)
    tcp.Client(host, port, s)
    main.run()

class MyOptions(usage.Options, usage.Options_hostport, usage.Options_base):
    """LDAPtor command line search utility"""

    def parseArgs(self, filter, *attributes):
        self.opts['filter'] = filter
        self.opts['attributes'] = attributes
      
if __name__ == "__main__":
    import sys
    try:
        config = MyOptions()
        config.parseOptions()
    except usage.UsageError, ue:
        sys.stderr.write('%s: %s\n' % (sys.argv[0], ue))
        sys.exit(1)

    main(config.opts['ldap-host'],
         config.opts['ldap-port'],
         config.opts['base'],
         config.opts['filter'],
         config.opts['attributes'])
