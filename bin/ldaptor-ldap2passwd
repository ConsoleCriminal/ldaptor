#!/usr/bin/python
import sys
from ldaptor.protocols.ldap import ldapclient, ldif, distinguishedname, ldapconnector, ldapsyntax
from ldaptor.protocols import pureber, pureldap
from ldaptor import usage, ldapfilter, config
from twisted.internet import protocol, reactor, defer

class Search(ldapclient.LDAPClient):
    def connectionMade(self):
	d=self.bind()
	d.addCallback(self._handle_bind_success)

    def _cbSearch(self, obj):
	a={}
	for attr, vals in obj.items():
	    attr=str(attr)
	    assert not a.has_key(attr)
	    a[attr]=map(str, vals)

	print ':'.join((
	    a['uid'][0],
	    'x',
	    a['uidNumber'][0],
	    a['gidNumber'][0],
	    a.get('gecos', a.get('cn', ['']))[0],
	    a['homeDirectory'][0],
	    a.get('loginShell', [''])[0],
	    ))

    def _handle_bind_success(self, x):
	matchedDN, serverSaslCreds = x
        o = ldapsyntax.LDAPEntry(client=self,
                                 dn=self.factory.base)
        d = o.search(filterObject=self.factory.filt,
                     attributes=['uid',
                                 'uidNumber',
                                 'gidNumber',
                                 'gecos',
                                 'cn',
                                 'homeDirectory',
                                 'loginShell',
                                 ],
                     callback=self._cbSearch)
        d.chainDeferred(self.factory.deferred)

class SearchFactory(protocol.ClientFactory):
    protocol = Search
    def __init__(self, deferred, base, filt):
	self.deferred=deferred
	self.base=base
	self.filt=filt

    def clientConnectionFailed(self, connector, reason):
	self.deferred.errback(reason)

exitStatus=0

def error(fail):
    print >>sys.stderr, 'fail:', fail.getErrorMessage()
    global exitStatus
    exitStatus=1

def main(cfg, filter_text):
    try:
        baseDN = cfg.getBaseDN()
    except config.MissingBaseDNError, e:
        print >>sys.stderr, "%s: %s." % (sys.argv[0], e)
        sys.exit(1)

    filt = ldapfilter.parseFilter('(objectClass=posixAccount)')
    if filter_text is not None:
	filt = pureldap.LDAPFilter_and([
	    filt,
	    ldapfilter.parseFilter(filter_text)])
    d=defer.Deferred()
    s=SearchFactory(d, baseDN, filt)
    d.addErrback(error)
    d.addBoth(lambda x: reactor.stop())

    c=ldapconnector.LDAPConnector(reactor, baseDN, s,
                                  overrides=cfg.getServiceLocationOverrides())
    c.connect()
    reactor.run()
    sys.exit(exitStatus)

class MyOptions(usage.Options, usage.Options_service_location, usage.Options_base_optional):
    """LDAPtor command line search utility"""

    def parseArgs(self, filter=None):
	self.opts['filter'] = filter

if __name__ == "__main__":
    try:
	opts = MyOptions()
	opts.parseOptions()
    except usage.UsageError, ue:
	sys.stderr.write('%s: %s\n' % (sys.argv[0], ue))
	sys.exit(1)

    cfg = config.LDAPConfig(baseDN=opts['base'],
                            serviceLocationOverrides=opts['service-location'])
    main(cfg, opts['filter'])
